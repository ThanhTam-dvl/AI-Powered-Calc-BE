import google.generativeai as genai
import ast
import json
from PIL import Image
from constants import GEMINI_API_KEY

genai.configure(api_key=GEMINI_API_KEY)

def analyze_image(img: Image, dict_of_vars: dict):
    model = genai.GenerativeModel(model_name="gemini-2.0-flash")
    dict_of_vars_str = json.dumps(dict_of_vars, ensure_ascii=False)
    prompt = (
        "B·∫°n l√† h·ªá th·ªëng x·ª≠ l√Ω c√¥ng th·ª©c to√°n h·ªçc t·ª´ ·∫£nh. H√£y ph√¢n t√≠ch h√¨nh ·∫£nh ƒë·∫ßu v√†o v√† tr·∫£ v·ªÅ k·∫øt qu·∫£ d∆∞·ªõi d·∫°ng JSON array h·ª£p l·ªá theo c√°c quy t·∫Øc sau:\n\n"
        
        "### QUY T·∫ÆC PH√ÇN LO·∫†I & X·ª¨ L√ù:\n"
        "1. **Bi·ªÉu th·ª©c ƒë∆°n gi·∫£n** (VD: 2 + 3*4, 5/(6-2)):\n"
        "   - √Åp d·ª•ng PEMDAS: D·∫•u ngo·∫∑c ‚Üí S·ªë m≈© ‚Üí Nh√¢n/Chia ‚Üí C·ªông/Tr·ª´\n"
        "   - K·∫øt qu·∫£: [{'expr': '2 + 3 * 4', 'result': 14}]\n\n"
        
        "2. **H·ªá ph∆∞∆°ng tr√¨nh** (VD: x^2 + 2x + 1 = 0, 3y = 4x):\n"
        "   - Gi·∫£i t·ª´ng bi·∫øn v√† tr·∫£ v·ªÅ nghi·ªám\n"
        "   - K·∫øt qu·∫£: [{'expr': 'x', 'result': -1}, {'expr': 'y', 'result': 4/3}]\n\n"
        
        "3. **G√°n gi√° tr·ªã bi·∫øn** (VD: x = 5, y = œÄ):\n"
        "   - L∆∞u v√†o t·ª´ ƒëi·ªÉn bi·∫øn v√† th√™m key 'assign': True\n"
        "   - K·∫øt qu·∫£: [{'expr': 'x', 'result': 5, 'assign': True}]\n\n"
        "   - Kh√¥ng hi·ªán k·∫øt qu·∫£ l√† (VD: a = 5 = 5)"

        
        "4. **B√†i to√°n ƒë·ªì th·ªã/h√¨nh ·∫£nh** (Va ch·∫°m c∆° h·ªçc, b√†i to√°n l∆∞·ª£ng gi√°c):\n"
        "   - M√¥ t·∫£ b·∫±ng text trong 'expr', k·∫øt qu·∫£ t√≠nh to√°n trong 'result'\n"
        "   - VD: [{'expr': 'Qu√£ng ƒë∆∞·ªùng v·∫≠t A di chuy·ªÉn', 'result': 25.3}]\n\n"
        
        "5. **Kh√°i ni·ªám tr·ª´u t∆∞·ª£ng** (T√¨nh y√™u, l·ªãch s·ª≠, tr√≠ch d·∫´n):\n"
        "   - 'expr': M√¥ t·∫£ h√¨nh ·∫£nh, 'result': Kh√°i ni·ªám\n"
        "   - VD: [{'expr': 'Tr√°i tim v·ªõi m≈©i t√™n xuy√™n qua', 'result': 'T√¨nh y√™u'}]\n\n"
        
        "### Y√äU C·∫¶U K·ª∏ THU·∫¨T:\n"
        "- ƒê√°p √°n lu√¥n tr·∫£ v·ªÅ b·∫±ng ng√¥n ng·ªØ Ti·∫øng Vi·ªát(Vietnamese)"
        "- Lu√¥n tr·∫£ v·ªÅ JSON array (kh√¥ng markdown/backticks)\n"
        "- Escape k√Ω t·ª± ƒë·∫∑c bi·ªát: \\\\n, \\\\t, \\\\\"\n"
        "- S·ª≠ d·ª•ng t·ª´ ƒëi·ªÉn bi·∫øn ng∆∞·ªùi d√πng: {{dict_of_vars_str}}\n"
        "- ƒê·∫£m b·∫£o s·ªë th·ª±c c√≥ d·∫•u . (VD: 3.0 thay v√¨ 3)\n"
        "- N·∫øu kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c lo·∫°i b√†i to√°n, tr·∫£ v·ªÅ [{'error': 'M√¥ t·∫£ l·ªói c·ª• th·ªÉ'}]"
    )
    response = model.generate_content([prompt, img])
    print("K·∫øt qu·∫£: ",response.text)
    answers = []
    clean_text = response.text.strip().strip("```json").strip("```")
    try:
        answers = json.loads(clean_text)
    except json.JSONDecodeError as e:
        print(f"Error parsing JSON response: {e}")
    for answer in answers:
        if 'assign' in answer:
            answer['assign'] = True
        else:
            answer['assign'] = False
    return answers

# import requests
# import json
# from PIL import Image
# from constants import GEMINI_API_KEY

# # API URL c·ªßa OpenRouter
# OPENROUTER_API_URL = "https://openrouter.ai/api/v1/chat/completions"

# def analyze_image(img: Image, dict_of_vars: dict):
#     headers = {
#         "Authorization": f"Bearer {GEMINI_API_KEY}",  # Thay GEMINI_API_KEY b·∫±ng API Key c·ªßa OpenRouter
#         "Content-Type": "application/json"
#     }

#     dict_of_vars_str = json.dumps(dict_of_vars, ensure_ascii=False)

#     prompt = (
#         f"B·∫°n l√† m·ªôt AI chuy√™n gi·∫£i to√°n. B·∫°n s·∫Ω nh·∫≠n ƒë∆∞·ª£c m·ªôt h√¨nh ·∫£nh c√≥ ch·ª©a b√†i to√°n ho·∫∑c bi·ªÉu th·ª©c to√°n h·ªçc v√† b·∫°n c·∫ßn gi·∫£i n√≥ m·ªôt c√°ch ch√≠nh x√°c.\n\n"
#         f"‚ö° **Quy t·∫Øc t√≠nh to√°n**:\n"
#         f"1Ô∏è‚É£ S·ª≠ d·ª•ng quy t·∫Øc **PEMDAS** (ngo·∫∑c tr∆∞·ªõc, l≈©y th·ª´a, nh√¢n/chia, c·ªông/tr·ª´ t·ª´ tr√°i sang ph·∫£i).\n"
#         f"2Ô∏è‚É£ ƒê·ªëi v·ªõi ph∆∞∆°ng tr√¨nh, h√£y gi·∫£i t·∫•t c·∫£ c√°c bi·∫øn v√† tr·∫£ v·ªÅ d∆∞·ªõi d·∫°ng JSON.\n"
#         f"3Ô∏è‚É£ N·∫øu c√≥ c√°c bi·∫øn trong bi·ªÉu th·ª©c, h√£y thay th·∫ø gi√° tr·ªã t·ª´ danh s√°ch ƒë√£ cho: {dict_of_vars_str}.\n"
#         f"4Ô∏è‚É£ N·∫øu l√† b√†i to√°n h√¨nh h·ªçc ho·∫∑c ƒë·ªì th·ªã, h√£y ph√¢n t√≠ch v√† t√¨m ra k·∫øt qu·∫£ ch√≠nh x√°c.\n\n"
#         f"üöÄ **V√≠ d·ª• b√†i to√°n v√† c√°ch tr·∫£ v·ªÅ JSON**:\n"
#         f"üîπ *B√†i to√°n 1*: `2 + 3 * 4` ‚Üí Tr·∫£ v·ªÅ: `{{'expr': '2 + 3 * 4', 'result': 14}}`\n"
#         f"üîπ *B√†i to√°n 2*: `x^2 + 2x - 3 = 0` ‚Üí Tr·∫£ v·ªÅ: `[{ {'expr': 'x', 'result': 1}, {'expr': 'x', 'result': -3} }]`\n"
#         f"üîπ *B√†i to√°n 3*: `x = 5, y = x + 3` ‚Üí Tr·∫£ v·ªÅ: `[{ {'expr': 'x', 'result': 5, 'assign': True}, {'expr': 'y', 'result': 8, 'assign': True} }]`\n"
#         f"üîπ *B√†i to√°n 4*: H√¨nh v·∫Ω m√¥ t·∫£ tam gi√°c vu√¥ng c√≥ hai c·∫°nh g√≥c vu√¥ng d√†i 3 v√† 4, t√¨m c·∫°nh huy·ªÅn ‚Üí Tr·∫£ v·ªÅ: `[{ {'expr': 'c', 'result': 5} }]`\n\n"
#         f"üìå **Y√™u c·∫ßu**:\n"
#         f"- Ch·ªâ tr·∫£ v·ªÅ JSON h·ª£p l·ªá **KH√îNG c√≥ markdown (` ``` `) ho·∫∑c vƒÉn b·∫£n th·ª´a**.\n"
#         f"- ƒê·ªãnh d·∫°ng k·∫øt qu·∫£ ph·∫£i ƒë√∫ng, c√≥ th·ªÉ parse b·∫±ng Python `json.loads()`.\n\n"
#         f"üì∑ **D·ªØ li·ªáu h√¨nh ·∫£nh s·∫Ω ƒë∆∞·ª£c ph√¢n t√≠ch ngay b√¢y gi·ªù!**\n"
#     )

#     payload = {
#         "model": "google/gemini-exp-1206:free",
#         "messages": [
#             {"role": "system", "content": "You are a math-solving assistant."},
#             {"role": "user", "content": prompt}
#         ],
#         "stream": False
#     }

#     try:
#         response = requests.post(OPENROUTER_API_URL, headers=headers, json=payload)
#         response.raise_for_status()  # Ki·ªÉm tra l·ªói HTTP (n·∫øu c√≥)
#         data = response.json()

#         # L·∫•y n·ªôi dung text t·ª´ ph·∫£n h·ªìi c·ªßa API
#         response_text = data.get("choices", [{}])[0].get("message", {}).get("content", "")

#         # Lo·∫°i b·ªè k√Ω t·ª± kh√¥ng mong mu·ªën v√† chuy·ªÉn ƒë·ªïi sang JSON
#         clean_text = response_text.strip().strip("```json").strip("```")
#         answers = json.loads(clean_text)

#         # X·ª≠ l√Ω th√™m th√¥ng tin 'assign'
#         for answer in answers:
#             answer['assign'] = 'assign' in answer
        
#         return answers
    
#     except requests.exceptions.RequestException as e:
#         print(f"HTTP Error: {e}")
#         return []
#     except json.JSONDecodeError as e:
#         print(f"Error parsing JSON response: {e}")
#         return []
